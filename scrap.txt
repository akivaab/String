Original dictionary API use:

function checkWordValidity(game) {
    let wordTraced = "";
    tilesTraced.forEach(tile => wordTraced += tile.innerHTML);

    // only words 3+ letters long
    if (wordTraced.length >= 3) {
        wordTraced = wordTraced.toLowerCase();
        fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${wordTraced}`)
            .then(response => {
                if (response.ok) return response.json();
                else throw new Error('Not a word.');
            })
            .then(data => {
                if (data[0].meanings) {
                    tilesTraced.forEach(tile => {
                        tile.classList.remove('touched');
                        tile.classList.add('correct');
                        setTimeout(function() {
                            tile.classList.remove('correct');
                            tile.classList.remove('tile');
                            tile.classList.add('empty');
                            tile.innerHTML = '';
                        }, 80);
                        markAboveAsFalling(game, tile);
                    });
                    scrollableList.style.border = '1px solid #ccc';
                    const newWord = document.createElement('li');
                    newWord.innerHTML = wordTraced;
                    listContainer.appendChild(newWord);
                    game.increaseScore(wordTraced.length);
                    tilesTraced = [];
                }
            })
            .catch(error => {
                console.error(error);
                tilesTraced.forEach(tile => {
                    tile.classList.remove('touched');
                    tile.classList.add('incorrect');
                    setTimeout(function() {
                        tile.classList.remove('incorrect');  
                    }, 80);
                });
                tilesTraced = [];
            });
    }
    else {
        tilesTraced.forEach(tile => {
            tile.classList.remove('touched');
        });
        tilesTraced = [];
    }
}


Second dictionary attempt:

document.querySelectorAll('.list-container').forEach((list) => {
        list.addEventListener('click', (e) => {
            if (e.target.tagName === 'LI') {
                const newTab = window.open("https://playscrabble.com/dictionary", "_blank");
                console.log('before new frame');
                newTab.onload = () => {
                    console.log('onload');
                    // Check if the document in the new tab contains iframes
                    if (newTab.document.body.querySelector('iframe')) {
                        console.log('iframe');
                        // If iframes are present, you may need to switch to the iframe
                        const iframe = newTab.document.body.querySelector('iframe');
                        const iframeDocument = iframe.contentDocument || iframe.contentWindow.document;
                        
                        const inputField = iframeDocument.querySelector(".DictionaryInputstyle__StyledInput-sc-11ep6dx-0.bbWmVX.dictionary-input");
                        const searchButton = iframeDocument.querySelector(".Buttonstyle__StyledButton-sc-7rtt3j-0.hdA-dKy");
    
                        // Set the value of the input field to the word
                        inputField.value = e.target.innerHTML;
                        // Simulate a click on the search button
                        searchButton.click();
                    } else {
                        console.log('no iframe');
                        // Access the input field and button in the Scrabble dictionary website
                        const inputField = newTab.document.querySelector(".DictionaryInputstyle__StyledInput-sc-11ep6dx-0.bbWmVX.dictionary-input");
                        const searchButton = newTab.document.querySelector(".Buttonstyle__StyledButton-sc-7rtt3j-0.hdA-dKy");
    
                        // Set the value of the input field to the word
                        inputField.value = e.target.innerHTML;
                        // Simulate a click on the search button
                        searchButton.click();
                    }
                    console.log('skip iframe');
                    // Access the div containing the definition
                    const definitionDiv = newTab.document.querySelector(".Flexstyle__StyledFlex-sc-1neqeo8-0.bGnbkf");
                    // Scroll down to the definition
                    window.scrollTo({
                        top: definitionDiv.offsetTop,
                        behavior: 'smooth' // You can use 'auto' instead of 'smooth' for instant scrolling
                    });
                };
            }
        });
    });


const observer = new MutationObserver((mutationList, observer) => {
    for (const mutation of mutationList) {
      if (mutation.type === "attributes" && mutation.attributeName == "style") changeAudioSpeed();
    }
  });
observer.observe(document.body, { attributes: true });


Match screen-content to grid's dimensions:

document.querySelectorAll('.screen-content').forEach(screen => {
            const paddingVertical = parseInt(getComputedStyle(screen).paddingTop) + parseInt(getComputedStyle(screen).paddingBottom);
            const paddingHorizontal = parseInt(getComputedStyle(screen).paddingLeft) + parseInt(getComputedStyle(screen).paddingRight);
            screen.style.height = (gridRect.height - paddingVertical) + 'px';
            screen.style.width = (gridRect.width - paddingHorizontal) + 'px';
});
